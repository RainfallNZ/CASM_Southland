ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
#Set up the Shiny app
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
map %>%
leaflet::addPolygons(
data = CP,  # the clipping polygon, currently Central Plains Scheme
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = 0
) %>%
addTiles() %>%
addRasterImage(ClippedDemoRaster,colors=pal,opacity = 0.5,layerId= "PET") %>%
addLegend(pal=pal,position = "bottomright",values = values(ClippedDemoRaster), title = LegendTitle) %>%
addImageQuery(ClippedDemoRaster, type="mousemove", layerId = "PET", digits = 1)
})
}
shinyApp(ui, server)
extent(CP)
DemoRaster <- raster(t(ETo), xmn=min(VariableArrays[['XLONG']]), xmx=max(VariableArrays[['XLONG']]), ymn=min(VariableArrays[['XLAT']]), ymx=max(VariableArrays[['XLAT']]), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
DemoRaster <- flip(DemoRaster, direction='y')
ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
#Set up the Shiny app
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
map %>%
fitbounds(extent(CP)) %>%
leaflet::addPolygons(
data = CP,  # the clipping polygon, currently Central Plains Scheme
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = 0
) %>%
addTiles() %>%
addRasterImage(ClippedDemoRaster,colors=pal,opacity = 0.5,layerId= "PET") %>%
addLegend(pal=pal,position = "bottomright",values = values(ClippedDemoRaster), title = LegendTitle) %>%
addImageQuery(ClippedDemoRaster, type="mousemove", layerId = "PET", digits = 1)
})
}
shinyApp(ui, server)
DemoRaster <- raster(t(ETo), xmn=min(VariableArrays[['XLONG']]), xmx=max(VariableArrays[['XLONG']]), ymn=min(VariableArrays[['XLAT']]), ymx=max(VariableArrays[['XLAT']]), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
DemoRaster <- flip(DemoRaster, direction='y')
ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
#Set up the Shiny app
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
map %>%
fitBounds(extent(CP)) %>%
leaflet::addPolygons(
data = CP,  # the clipping polygon, currently Central Plains Scheme
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = 0
) %>%
addTiles() %>%
addRasterImage(ClippedDemoRaster,colors=pal,opacity = 0.5,layerId= "PET") %>%
addLegend(pal=pal,position = "bottomright",values = values(ClippedDemoRaster), title = LegendTitle) %>%
addImageQuery(ClippedDemoRaster, type="mousemove", layerId = "PET", digits = 1)
})
}
shinyApp(ui, server)
?fitBounds
DemoRaster <- raster(t(ETo), xmn=min(VariableArrays[['XLONG']]), xmx=max(VariableArrays[['XLONG']]), ymn=min(VariableArrays[['XLAT']]), ymx=max(VariableArrays[['XLAT']]), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
DemoRaster <- flip(DemoRaster, direction='y')
ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
bbox <- st_bbox(CP) %>%
as.vector()
extent(CP)
extent(CP) %>% as.vector()
DemoRaster <- raster(t(ETo), xmn=min(VariableArrays[['XLONG']]), xmx=max(VariableArrays[['XLONG']]), ymn=min(VariableArrays[['XLAT']]), ymx=max(VariableArrays[['XLAT']]), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
DemoRaster <- flip(DemoRaster, direction='y')
ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
bbox <- extent(CP) %>%
as.vector()
#Set up the Shiny app
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
map %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4]) %>%
leaflet::addPolygons(
data = CP,  # the clipping polygon, currently Central Plains Scheme
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = 0
) %>%
addTiles() %>%
addRasterImage(ClippedDemoRaster,colors=pal,opacity = 0.5,layerId= "PET") %>%
addLegend(pal=pal,position = "bottomright",values = values(ClippedDemoRaster), title = LegendTitle) %>%
addImageQuery(ClippedDemoRaster, type="mousemove", layerId = "PET", digits = 1)
})
}
shinyApp(ui, server)
bbox
DemoRaster <- raster(t(ETo), xmn=min(VariableArrays[['XLONG']]), xmx=max(VariableArrays[['XLONG']]), ymn=min(VariableArrays[['XLAT']]), ymx=max(VariableArrays[['XLAT']]), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
DemoRaster <- flip(DemoRaster, direction='y')
ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
bbox <- extent(CP) %>%
as.vector()
#Set up the Shiny app
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
map %>%
fitBounds(bbox[1], bbox[3], bbox[2], bbox[4]) %>%
leaflet::addPolygons(
data = CP,  # the clipping polygon, currently Central Plains Scheme
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = 0
) %>%
addTiles() %>%
addRasterImage(ClippedDemoRaster,colors=pal,opacity = 0.5,layerId= "PET") %>%
addLegend(pal=pal,position = "bottomright",values = values(ClippedDemoRaster), title = LegendTitle) %>%
addImageQuery(ClippedDemoRaster, type="mousemove", layerId = "PET", digits = 1)
})
}
shinyApp(ui, server)
DemoRaster <- raster(t(ETo), xmn=min(VariableArrays[['XLONG']]), xmx=max(VariableArrays[['XLONG']]), ymn=min(VariableArrays[['XLAT']]), ymx=max(VariableArrays[['XLAT']]), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
DemoRaster <- flip(DemoRaster, direction='y')
ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
bbox <- extent(CP) %>%
as.vector()
#Set up the Shiny app
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
map %>%
fitBounds(bbox[1], bbox[3], bbox[2], bbox[4]) %>%
leaflet::addPolygons(
data = CP,  # the clipping polygon, currently Central Plains Scheme
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = 0
) %>%
addTiles() %>%
addRasterImage(ClippedDemoRaster,colors=pal,opacity = 0.5,layerId= "PET") %>%
addLegend(pal=pal,position = "bottomright",values = values(ClippedDemoRaster), title = LegendTitle) %>%
addImageQuery(ClippedDemoRaster, type="mousemove", layerId = "PET", digits = 1)
})
}
shinyApp(ui, server)
DemoRaster <- raster(t(ETo), xmn=min(VariableArrays[['XLONG']]), xmx=max(VariableArrays[['XLONG']]), ymn=min(VariableArrays[['XLAT']]), ymx=max(VariableArrays[['XLAT']]), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
DemoRaster <- flip(DemoRaster, direction='y')
ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
bbox <- extent(CP) %>%
as.vector()
#Set up the Shiny app
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
map %>%
fitBounds(bbox[1], bbox[3], bbox[2], bbox[4]) %>%
leaflet::addPolygons(
data = CP,  # the clipping polygon, currently Central Plains Scheme
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = 0
) %>%
addTiles() %>%
addRasterImage(ClippedDemoRaster,colors=pal,opacity = 0.5,layerId= "PET") %>%
addLegend(pal=pal,position = "bottomright",values = values(ClippedDemoRaster), title = LegendTitle) %>%
addImageQuery(ClippedDemoRaster, type="mousemove", layerId = "PET", digits = 1)
})
}
shinyApp(ui, server)
#R script To generate Daily Potential Evapotranspiration estimates using the FAO PET equation on WRF data"
#Load libraries and files and define constants
DataDirectory <- "/home/tim/Desktop/Documents/Projects/PET_WRF/Data"
GISDirectory <- file.path(DataDirectory,"GISData")
WRFDataFile <- "PETVariables.nc"
if (!require(ncdf4)) install.packages('ncdf4'); library(ncdf4) # package for netcdf manipulation
if (!require(raster)) install.packages('raster'); library(raster) # package for raster manipulation
if (!require(rgdal)) install.packages('rgdal'); library(raster) # package for geospatial analysis
if (!require(ggplot2)) install.packages('ggplot2'); library(ggplot2) # package for plotting
if (!require(rgeos)) install.packages('rgeos'); library(rgeos) #Package with GIS functions
if (!require(leaflet)) install.packages('leaflet'); library(leaflet) #Package with mapping functions
if (!require(viridis)) install.packages('viridis'); library(viridis)   #Provides color palettes that are good for mapping rain and account for colour blindness
#library(h5)
if (!require(RColorBrewer)) install.packages('RColorBrewer'); library(RColorBrewer)
if (!require(shiny)) install.packages('shiny'); library(shiny)
if (!require(mapview)) install.packages('mapview'); library(mapview)
#Load the GIS spatial data and get it into a common projection
#Load the Regional Council areas
RegionalCouncilAreas <- readOGR(dsn=file.path(GISDirectory,"statsnzregional-council-2018-clipped-generalised-SHP"),layer="regional-council-2018-clipped-generalised")
IrrigationAreas <- readOGR(dsn=file.path(GISDirectory,"Surface_Water_Irrigation_Proposed_Schemes"),layer="Surface_Water_Irrigation_Proposed_Schemes")
#Explicitly set the projection to WGMS84
RegionalCouncilAreas <- spTransform(RegionalCouncilAreas, crs('+init=epsg:4326'))
IrrigationAreas <- spTransform(IrrigationAreas, crs('+init=epsg:4326'))
## Create a clipping polygon, set to Central Plains Irrigation Scheme
CP <- IrrigationAreas[IrrigationAreas@data$SCHEME=="Central Plains",]
#Define colour palettes, for use later.
Magma <- rev(magma(9))
#Define a few constants used in the FAO equations
G <- 0 # G is the soil heat flux. At the daily time step it is close to zero (See FAO equation 42)
cp <- 1.013 * 10^-3 #Specific heat of "average condition" moist air at constant pressure in MJ kg-1 °C-1. ie the energy required to increase 1 kg of moist air by 1 degree. See FAO equation 8
lambda <- 2.45 #latent heat of vaporization, in MJ Kg-1 °C-1. See FAO equation 8
epsilon <- 0.622 #ratio molecular weight of water vapour/dry air. See FAO equation 8
a <- 0.23 #albedo of hypothetical grass reference crop, dimensionless. See FAO equation 38
sigma <- 4.903 * 10^-9 #Stefan-Boltzmann constant. MJ K-4 m-2 day-1. See FAO equation 39
#Start by extracting all of the variables into a list of arrays
nc_data <- nc_open(file.path(DataDirectory,WRFDataFile))
#Extract all of the data into their own arrays
VariableArrays <- lapply(names(nc_data$var), ncvar_get, nc=nc_data)
names(VariableArrays) <- names(nc_data$var)
nc_close(nc_data)
LastTimeStep <- as.POSIXct(tail(VariableArrays[["Times"]],1),tz = "UTC")
attributes(LastTimeStep)$tzone <- "NZDT"
#Convert 10 m wind vectors into windspeed, and bring it down to 2 m using FAO guidelines (http://www.fao.org/3/X0490E/x0490e07.htm#wind%20profile%20relationship)
#then determine the daily average
VariableArrays[["WindSpeed10m"]] <- (VariableArrays[['V10']]^2 + VariableArrays[['U10']]^2)^0.5
VariableArrays[["WindSpeed2m"]]  = VariableArrays[["WindSpeed10m"]]* 4.87 / log( 67.8 * 10 - 5.42 )
u2 <- apply(VariableArrays[["WindSpeed2m"]], c(1,2), mean)
#Get the average surface pressure, convert from Pascals to kilo pascals and then calculate the psychometric constant (see FAO equation 8)
P <- apply(VariableArrays[["PSFC"]], c(1,2), mean) / 1000 #convert from Pascals to kilo Pascals
gamma <- cp * P / (epsilon * lambda)
#Get the mean daily temperature, in degrees C, which is defined as the average of the daily maximum and minimum (see FAO equation 9)
Tmax <- apply(VariableArrays[["T2"]], c(1,2), max) - 273.15
Tmin <- apply(VariableArrays[["T2"]], c(1,2), min) - 273.15
T <- (Tmax + Tmin) / 2
#Get the saturation vapor pressure from the temperature(see FAO equations 11 and 12)
eoTmax <- 0.6108 * exp(17.27 * Tmax / (Tmax + 237.3))
eoTmin <- 0.6108 * exp(17.27 * Tmin / (Tmin + 237.3))
es <- (eoTmax + eoTmin) / 2
#Calculate delta, the slope of the saturation vapour pressure curve (see FAO equation 13)
delta <- 4098 * 0.6108 * exp(17.27 * T/(T+237.3))/(T+237.3)^2
#Actual vapour pressure is based on the specific humidity. I suspect the conversion here is overly complicated. I convert the specific humidity to relative humidity (using https://earthscience.stackexchange.com/questions/2360/how-do-i-convert-specific-humidity-to-relative-humidity), then convert the relative humidity to actual vapour pressure using FAO equation 17
RH <- 0.263 * VariableArrays[["Q2"]] * VariableArrays[["PSFC"]] / (exp(17.67*(VariableArrays[["T2"]]-273.16)/(VariableArrays[["T2"]]-29.65)))
RHmax <- apply(RH, c(1,2), max)
RHmin <- apply(RH, c(1,2), min)
ea <- (eoTmin*RHmax / 100 + eoTmax*RHmin / 100) / 2
#Now need to calculate net radiation. From FAO equations 38, 39 and 40
#Rs is incoming solar radiation. It needs to be converted from W m-2 to MJ m-2 day-1.
Rs <- apply(VariableArrays[["SWDOWN"]], c(1,2), sum) * 60 *60/ 1000000
Rns <- (1-a)* Rs
Ra <- VariableArrays[["ACSWDNTC"]][,,24] / 1000000
z <- VariableArrays[["HGT"]][,,1]
Rso <- (0.75 + 2 * 10^-5 * z)* Ra #FAO equation 37
Rnl <- sigma *((Tmax+273.15)^4+(Tmin+273.15)^4)/2 * (0.34 - 0.14 * ea^0.5) * (1.35 * Rs/Rso - 0.35) #FAO equation 39
Rn <- Rns - Rnl #FAO equation 40
#Now, calculate PET! FAO equation 6
ETo <- (0.408 * delta * (Rn - G) + gamma * 900 / (T + 273) * u2 * (es - ea)) /
(delta + gamma * (1 + 0.34 * u2))
#Demonstration plot of a variable
DemoRaster <- raster(t(ETo), xmn=min(VariableArrays[['XLONG']]), xmx=max(VariableArrays[['XLONG']]), ymn=min(VariableArrays[['XLAT']]), ymx=max(VariableArrays[['XLAT']]), crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
DemoRaster <- flip(DemoRaster, direction='y')
ClippedDemoRaster <- mask(DemoRaster,CP) # Clipped to ECan area
map <- leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap)
#map  # show the map
pal <- colorNumeric(Magma, values(ClippedDemoRaster),  na.color = "transparent")
LegendTitle <- paste("PET (mm) </br>",format(LastTimeStep,"%a %d %b %Y"))
bbox <- extent(CP) %>%
as.vector()
#Set up the Shiny app
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
map %>%
fitBounds(bbox[1], bbox[3], bbox[2], bbox[4]) %>%
leaflet::addPolygons(
data = CP,  # the clipping polygon, currently Central Plains Scheme
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = 0
) %>%
addTiles() %>%
addRasterImage(ClippedDemoRaster,colors=pal,opacity = 0.5,layerId= "PET") %>%
addLegend(pal=pal,position = "bottomright",values = values(ClippedDemoRaster), title = LegendTitle) %>%
addImageQuery(ClippedDemoRaster, type="mousemove", layerId = "PET", digits = 1)
})
}
shinyApp(ui, server)
shiny::runApp('Desktop/Documents/Projects/MetSolutionsWindGraphs/R/ShinyApp')
runApp('Desktop/Documents/Projects/MetSolutionsWindGraphs/R/ShinyApp')
if (!require(ggplot2)) install.packages('ggplot2'); library(ggplot2) # package for plotting
if (!require(plotly)) install.packages('plotly'); library(plotly)
if (!require(shiny)) install.packages('shiny'); library(shiny)
if (!require(rsconnect)) install.packages('rsconnect'); library(rsconnect) #Package to help deploy shiny app to the web
get_theme()
if (!require(ggplot2)) install.packages('ggplot2'); library(ggplot2) # package for plotting
if (!require(plotly)) install.packages('plotly'); library(plotly)
if (!require(shiny)) install.packages('shiny'); library(shiny)
if (!require(rsconnect)) install.packages('rsconnect'); library(rsconnect) #Package to help deploy shiny app to the web
WindPlot <- ggplot(data=WindData, aes(x=Date.Time, y=Plotted..MW., ymin=Lower.bound..MW., ymax=Upper.bound..MW.,group=1)) +
#geom_line(aes(y = Regional.demand..MW., colour = "Energy Demand",
#              text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
#                           "Demand:", WindData[,"Regional.demand..MW."],"MW"))) +
geom_line(aes(y = Plotted..MW., colour = "Wind Generation",
text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
"Wind generation:", WindData[,"Plotted..MW."],"MW", "<br>",
"Upper bound:", WindData[,"Upper.bound..MW."],"MW", "<br>",
"Lower Bound:", WindData[,"Lower.bound..MW."],"MW", "<br>",
"Generation capacity:", 100 * WindData[,"Capacity.factor"],"%"))) +
geom_ribbon(fill="grey70",colour="grey70",alpha=0.5) +
scale_x_datetime(date_breaks = "1 days",date_minor_breaks = "1 hours",date_labels = "%d-%b")+
ylab("MW")+ xlab("") +
theme(legend.title=element_blank()) +
scale_y_continuous(sec.axis = sec_axis(~.*4.5, name = "Capacity Factor [%]"))
WindData <- read.csv(file.path("Data",WindDataFile))
WindDataFile <- "ExampleWindData.csv"
if (!require(ggplot2)) install.packages('ggplot2'); library(ggplot2) # package for plotting
if (!require(plotly)) install.packages('plotly'); library(plotly)
if (!require(shiny)) install.packages('shiny'); library(shiny)
if (!require(rsconnect)) install.packages('rsconnect'); library(rsconnect) #Package to help deploy shiny app to the web
WindData <- read.csv(file.path("Data",WindDataFile))
getwd()
setwd("~/Desktop/Documents/Projects/MetSolutionsWindGraphs/R/ShinyApp")
if (!require(ggplot2)) install.packages('ggplot2'); library(ggplot2) # package for plotting
if (!require(plotly)) install.packages('plotly'); library(plotly)
if (!require(shiny)) install.packages('shiny'); library(shiny)
if (!require(rsconnect)) install.packages('rsconnect'); library(rsconnect) #Package to help deploy shiny app to the web
runApp()
if (!require(ggplot2)) install.packages('ggplot2'); library(ggplot2) # package for plotting
if (!require(plotly)) install.packages('plotly'); library(plotly)
if (!require(shiny)) install.packages('shiny'); library(shiny)
if (!require(rsconnect)) install.packages('rsconnect'); library(rsconnect) #Package to help deploy shiny app to the web
WindData <- read.csv(file.path("Data",WindDataFile))
WindData$Date.Time <- as.POSIXct(WindData$Date.Time..NZST.,tz="Etc/GMT-12",format="%d/%m/%Y %H:%M")
WindPlot <- ggplot(data=WindData, aes(x=Date.Time, y=Plotted..MW., ymin=Lower.bound..MW., ymax=Upper.bound..MW.,group=1)) +
#geom_line(aes(y = Regional.demand..MW., colour = "Energy Demand",
#              text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
#                           "Demand:", WindData[,"Regional.demand..MW."],"MW"))) +
geom_line(aes(y = Plotted..MW., colour = "Wind Generation",
text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
"Wind generation:", WindData[,"Plotted..MW."],"MW", "<br>",
"Upper bound:", WindData[,"Upper.bound..MW."],"MW", "<br>",
"Lower Bound:", WindData[,"Lower.bound..MW."],"MW", "<br>",
"Generation capacity:", 100 * WindData[,"Capacity.factor"],"%"))) +
geom_ribbon(fill="grey70",colour="grey70",alpha=0.5) +
scale_x_datetime(date_breaks = "1 days",date_minor_breaks = "1 hours",date_labels = "%d-%b")+
ylab("MW")+ xlab("") +
theme(legend.title=element_blank()) +
scale_y_continuous(sec.axis = sec_axis(~.*4.5, name = "Capacity Factor [%]"))
DemandPlot <- ggplot(data=WindData, aes(x=Date.Time, y=Regional.demand..MW.,group=1)) +
geom_line(aes(y = Regional.demand..MW., colour = "Energy Demand",
text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
"Demand:", WindData[,"Regional.demand..MW."],"MW"))) +
scale_x_datetime(date_breaks = "1 days",date_minor_breaks = "1 hours",date_labels = "%d-%b")+
ylab("MW")+ xlab("") +
theme(legend.title=element_blank())
MyPlotlyPlot <- ggplotly(WindPlot,tooltip = c("text"))
names(theme_get())
theme_get()$axis.ticks
theme_get()$axis.text
runApp()
runApp()
names(theme_get())
theme_get()$axis.ticks
theme_get()$axis.line.y
theme_get()$strip.text.y
runApp()
?add_lines
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
WindPlot <- ggplot(data=WindData, aes(x=Date.Time, y=Plotted..MW., ymin=Lower.bound..MW., ymax=Upper.bound..MW.,group=1)) +
#geom_line(aes(y = Regional.demand..MW., colour = "Energy Demand",
#              text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
#                           "Demand:", WindData[,"Regional.demand..MW."],"MW"))) +
geom_line(aes(y = Plotted..MW., colour = "Wind Generation",
text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
"Wind generation:", WindData[,"Plotted..MW."],"MW", "<br>",
"Upper bound:", WindData[,"Upper.bound..MW."],"MW", "<br>",
"Lower Bound:", WindData[,"Lower.bound..MW."],"MW", "<br>",
"Generation capacity:", 100 * WindData[,"Capacity.factor"],"%"))) +
geom_ribbon(fill="grey70",colour="grey70",alpha=0.5) +
scale_x_datetime(date_breaks = "1 days",date_minor_breaks = "1 hours",date_labels = "%d-%b")+
ylab("MW")+ xlab("") +
theme(legend.title=element_blank()) +
scale_y_continuous(sec.axis = sec_axis(~.*4.5, name = "Capacity Factor [%]"),
expand = c(0, 0),limits = c(0, 500))
my.ggp.yrange <- ggplot_build(my.ggp)$panel$ranges[[1]]$y.range
my.ggp.xrange <- ggplot_build(my.ggp)$panel$ranges[[1]]$x.range
my.ggp.yrange <- ggplot_build(WindPlot)$panel$ranges[[1]]$y.range
ggplot_build(WindPlot)$panel$ranges[[1]]$y.range
ggplot_build(WindPlot)$layout$panel_ranges[[1]]$y.range
ggp$layout$panel_scales_x[[1]]$range$range
WindPlot$layout$panel_scales_x[[1]]$range$range
WindPlot$layout$panel_params[[1]]$x.range
WindPlot$layout$panel_params[[1]]
WindPlot$layout
WindPlot <- ggplot(data=WindData, aes(x=Date.Time, y=Plotted..MW., ymin=Lower.bound..MW., ymax=Upper.bound..MW.,group=1)) +
#geom_line(aes(y = Regional.demand..MW., colour = "Energy Demand",
#              text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
#                           "Demand:", WindData[,"Regional.demand..MW."],"MW"))) +
geom_line(aes(y = Plotted..MW., colour = "Wind Generation",
text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
"Wind generation:", WindData[,"Plotted..MW."],"MW", "<br>",
"Upper bound:", WindData[,"Upper.bound..MW."],"MW", "<br>",
"Lower Bound:", WindData[,"Lower.bound..MW."],"MW", "<br>",
"Generation capacity:", 100 * WindData[,"Capacity.factor"],"%"))) +
geom_ribbon(fill="grey70",colour="grey70",alpha=0.5) +
scale_x_datetime(date_breaks = "1 days",date_minor_breaks = "1 hours",date_labels = "%d-%b")+
ylab("MW")+ xlab("") +
theme(legend.title=element_blank()) +
scale_y_continuous(sec.axis = sec_axis(~.*4.5, name = "Capacity Factor [%]"),
expand = c(0, 0),limits = c(0, 500))
WindPlot
gpp <- ggplot_build(Windplot)
WindPlot <- ggplot(data=WindData, aes(x=Date.Time, y=Plotted..MW., ymin=Lower.bound..MW., ymax=Upper.bound..MW.,group=1)) +
#geom_line(aes(y = Regional.demand..MW., colour = "Energy Demand",
#              text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
#                           "Demand:", WindData[,"Regional.demand..MW."],"MW"))) +
geom_line(aes(y = Plotted..MW., colour = "Wind Generation",
text = paste("Forecast time:", format(WindData[,"Date.Time"], "%d-%m-%Y %H:%M"), "<br>",
"Wind generation:", WindData[,"Plotted..MW."],"MW", "<br>",
"Upper bound:", WindData[,"Upper.bound..MW."],"MW", "<br>",
"Lower Bound:", WindData[,"Lower.bound..MW."],"MW", "<br>",
"Generation capacity:", 100 * WindData[,"Capacity.factor"],"%"))) +
geom_ribbon(fill="grey70",colour="grey70",alpha=0.5) +
scale_x_datetime(date_breaks = "1 days",date_minor_breaks = "1 hours",date_labels = "%d-%b")+
ylab("MW")+ xlab("") +
theme(legend.title=element_blank()) +
scale_y_continuous(sec.axis = sec_axis(~.*4.5, name = "Capacity Factor [%]"),
expand = c(0, 0),limits = c(0, 500))
gpp <- ggplot_build(WindPlot)
ggp$layout$panel_params[[1]]$y.range
gpp$layout$panel_params[[1]]$y.range
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?guide_legend
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
